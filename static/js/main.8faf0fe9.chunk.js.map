{"version":3,"sources":["serviceWorker.js","redux/store.js","Todo/TodoListTasks/TodoListTask/TodoListTask.jsx","Todo/TodoListTasks/TodoListTasks.js","Todo/TodoListFooter/TodoListFooter.js","Todo/TodoListHeader/TodoListTitle.js","Todo/TodoListHeader/AddNewItemForm.js","Todo/TodoList.jsx","Todo/Todo.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","store","_state","TodoList","TodoListTasks","tasks","id","title","isDone","priority","TodoListFooter","filter","filterValue","getState","this","TodoListTask","state","editMode","callChangeIsDone","el","props","changeIsDone","callChangeIsTitle","e","body","target","value","changeIsTitle","activatedEditMode","setState","deActivatedEditMode","Fragment","map","key","className","type","onChange","bind","defaultChecked","onBlur","onClick","React","Component","TodoListHeader","isHidden","handleShow","handleHidden","classForAll","classForCompleted","classForActive","changeFilterValue","TodoListTitle","AddNewItemForm","error","inputText","text","callAddItem","newTitle","addItem","render","placeholder","taskText","addTask","t","Todo","obj","length","saveState","filterText","changeIsTask","taskId","newTasks","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","App","todoLists","setStorage","getStorage","newTodoList","addTodoList","tl","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,IAuBeC,EAvBH,CACRC,OAAQ,CACJC,SAAU,CACNC,cAAe,CACXC,MAAO,CACH,CAACC,GAAI,EAAGC,MAAO,MAAOC,QAAQ,EAAOC,SAAU,OAC/C,CAACH,GAAI,EAAGC,MAAO,KAAMC,QAAQ,EAAOC,SAAU,UAC9C,CAACH,GAAI,EAAGC,MAAO,UAAWC,QAAQ,EAAMC,SAAU,OAClD,CAACH,GAAI,EAAGC,MAAO,KAAMC,QAAQ,EAAOC,SAAU,SAGtDC,eAAgB,CACZC,OAAQ,CACJC,YAAa,UAM7BC,SAnBQ,WAoBJ,OAAOC,KAAKZ,S,kDC8BLa,G,iNA/CXC,MAAQ,CACJC,UAAU,G,EAEdC,iBAAmB,SAACC,GAChB,EAAKC,MAAMC,aAAaF,EAAGb,GAAIa,EAAGX,S,EAEtCc,kBAAoB,SAACC,EAAGJ,GACpB,IAAIK,EAAOD,EAAEE,OAAOC,MACpB,EAAKN,MAAMO,cAAcR,EAAGb,GAAIkB,I,EAEpCI,kBAAmB,SAACtB,GAChB,EAAKuB,SAAS,CACVZ,UAAU,K,EAGlBa,oBAAqB,SAACxB,GAClB,EAAKuB,SAAS,CACVZ,UAAU,K,wEAIR,IAAD,OACL,OACI,kBAAC,IAAMc,SAAP,KACKjB,KAAKM,MAAMJ,MAAMgB,KAAI,SAAAb,GAClB,OACI,yBAAKc,IAAKd,EAAGb,GAAI4B,UAAWf,EAAGX,OAAO,qBAAsB,iBACxD,2BAAO2B,KAAK,WAAWC,SAAU,EAAKlB,iBAAiBmB,KAAK,EAAMlB,GAC3DmB,eAAgBnB,EAAGX,SAC1B,wCAAUW,EAAGb,GAAb,MACC,EAAKU,MAAMC,SACR,2BAAOkB,KAAK,OACLI,OAAQ,EAAKT,oBACbM,SAAU,SAACb,GAAD,OAAK,EAAKD,kBAAkBC,EAAIJ,IAC1CO,MAAOP,EAAGZ,QACjB,0BAAMiC,QAAS,EAAKZ,kBAAkBS,KAAK,IAA3C,UAAsDlB,EAAGZ,QAE7D,+CAAqBY,EAAGV,mB,GAtCzBgC,IAAMC,YCWlBC,EAVQ,SAACvB,GACpB,OACI,yBAAKc,UAAU,kBACX,kBAAC,EAAD,CAAcP,cAAgBP,EAAMO,cACtBN,aAAcD,EAAMC,aACpBL,MAAOI,EAAMJ,UCgCxB2B,G,iNApCX3B,MAAQ,CACJ4B,UAAU,G,EAEdC,WAAa,WACT,EAAKhB,SAAS,CACVe,UAAU,K,EAGlBE,aAAe,WACX,EAAKjB,SAAS,CACVe,UAAU,K,wEAGT,IAAD,OACAG,EAAyC,QAA3BjC,KAAKM,MAAMR,YAAwB,eAAiB,GAClEoC,EAA+C,cAA3BlC,KAAKM,MAAMR,YAA8B,eAAiB,GAC9EqC,EAA4C,WAA3BnC,KAAKM,MAAMR,YAA2B,eAAiB,GAC5E,OACI,yBAAKsB,UAAU,mBACTpB,KAAKE,MAAM4B,UACb,kBAAC,IAAMb,SAAP,KACI,4BAAQS,QAAS,kBAAK,EAAKpB,MAAM8B,kBAAkB,QAAOhB,UAAWa,GAArE,OACA,4BAAQP,QAAS,kBAAK,EAAKpB,MAAM8B,kBAAkB,cAAahB,UAAWc,GAA3E,aACA,4BAAQR,QAAS,kBAAK,EAAKpB,MAAM8B,kBAAkB,WAAUhB,UAAWe,GAAxE,WAGJ,6BACCnC,KAAKE,MAAM4B,SACR,4BAAQJ,QAAS1B,KAAK+B,YAAtB,QACA,4BAAQL,QAAS1B,KAAKgC,cAAtB,e,GA9BSL,IAAMC,YCSpBS,EAVO,SAAC/B,GACnB,OACI,yBAAKc,UAAU,mBACX,wBAAIA,UAAU,0BAA0Bd,EAAMb,S,OCwC3C6C,E,2MA1CXpC,MAAQ,CACJqC,OAAO,EACP9C,MAAO,I,EAEX+C,UAAY,SAAC/B,GACT,IAAIgC,EAAOhC,EAAEE,OAAOC,MACpB,EAAKG,SAAS,CACVwB,OAAO,EACP9C,MAAOgD,K,EAGfC,YAAc,WACV,IAAIC,EAAW,EAAKzC,MAAMT,MAC1B,EAAKsB,SAAS,CAACtB,MAAO,KAEjB,EAAKS,MAAMT,MAOZ,EAAKsB,SAAS,CACVwB,OAAO,IAPX,EAAKxB,SAAS,CACVwB,OAAO,EACP9C,MAAOkD,IAQf,EAAKrC,MAAMsC,QAAQD,I,EAIvBE,OAAS,WACL,OACI,yBAAKzB,UAAU,wBACX,2BAAOC,KAAK,OAAOD,UAAW,EAAKlB,MAAMqC,MAAQ,QAAU,GAAI3B,MAAO,EAAKV,MAAMT,MAC1E6B,SAAU,EAAKkB,UAAUjB,KAAf,gBACVuB,YAAY,kBACnB,4BAAQpB,QAAS,EAAKgB,YAAYnB,KAAjB,iBAAjB,S,6BArCaI,IAAMC,WC0CpBvC,E,iLApCD,IAAD,OACL,OACI,yBAAK+B,UAAU,YACX,yBAAKA,UAAU,mBACX,kBAAC,EAAD,CAAe3B,MAASO,KAAKM,MAAMb,QACnC,kBAAC,EAAD,CAAkBmB,MAAOZ,KAAKM,MAAMJ,MAAMU,MACxBmC,SAAU/C,KAAKM,MAAMyC,SACrBH,QAAW5C,KAAKM,MAAM0C,WAI5C,kBAAC1D,EAAD,CAAeiB,aAAcP,KAAKM,MAAMC,aACzBM,cAAgBb,KAAKM,MAAMO,cAC3BX,MAAOF,KAAKM,MAAMJ,MAAMX,MAAMM,QAAO,SAAAoD,GAChD,OAAQ,EAAK3C,MAAMJ,MAAMJ,aACrB,IAAK,MACD,OAAO,EACX,IAAK,YACD,OAAOmD,EAAEvD,OACb,IAAK,SACD,OAAQuD,EAAEvD,OACd,QACI,OAAO,QAKnB,kBAAC,EAAD,CAAgB0C,kBAAmBpC,KAAKM,MAAM8B,kBAC9BtC,YAAaE,KAAKM,MAAMJ,MAAMJ,mB,GA9BvC6B,IAAMC,W,kOCyFdsB,E,YA1FX,WAAY5C,GAAQ,IAAD,8BACf,4CAAMA,KAOV0C,QAAU,SAACP,GACP,IAKIU,EAAM,CACN3D,GALA,EAAKU,MAAMX,MAAM6D,OAAS,EACjB,EAAKlD,MAAMX,MAAM,EAAKW,MAAMX,MAAM6D,OAAS,GAAG5D,GAAK,EAEnD,EAGTC,MAAOgD,EACP/C,QAAQ,EACRC,SAAU,OAEV8C,GACD,EAAK1B,SAAS,CACTxB,MAAM,GAAD,mBAAM,EAAKW,MAAMX,OAAjB,CAAwB4D,KAC9B,EAAKE,YAvBG,EA4BnBjB,kBAAoB,SAACkB,GACjB,EAAKvC,SAAS,CACVjB,YAAawD,KA9BF,EAiCnBC,aAAe,SAACC,EAAQL,GACpB,IAAIM,EAAW,EAAKvD,MAAMX,MAAM2B,KAAI,SAAA+B,GAChC,OAAIA,EAAEzD,KAAOgE,E,yVACF,CAAP,GAAWP,EAAX,GAAiBE,GAEVF,KAGf,EAAKlC,SAAS,CACVxB,MAAOkE,GACR,EAAKJ,YA3CO,EA6CnB9C,aAAe,SAACiD,EAAQ9D,GACpB,EAAK6D,aAAaC,EAAQ,CAAC9D,QAASA,KA9CrB,EAgDnBmB,cAAgB,SAAC2C,EAAQ/D,GACrB,EAAK8D,aAAaC,EAAQ,CAAC/D,WAjDZ,EAoDnB4D,UAAY,WACR,IAAIK,EAAgBC,KAAKC,UAAU,EAAK1D,OACxC2D,aAAaC,QAAQ,OAAS,EAAKxD,MAAMd,GAAIkE,IAtD9B,EAwDnBK,aAAe,WACX,IAAI7D,EAAQ,CACRX,MAAO,GACPqB,MAAO,GACPd,YAAa,OAEb4D,EAAgBG,aAAaG,QAAQ,OAAS,EAAK1D,MAAMd,IACzDkE,IACAxD,EAAQyD,KAAKM,MAAMP,IAEvB,EAAK3C,SAASb,IAlEC,EA0EnB2C,OAAS,WACL,OACI,yBAAKzB,UAAU,YACX,kBAAC,EAAD,CAAU2B,SAAU,EAAKA,SACftD,MAAS,EAAKa,MAAMb,MACpBuD,QAAS,EAAKA,QACdZ,kBAAmB,EAAKA,kBACxB7B,aAAc,EAAKA,aACnBM,cAAe,EAAKA,cACpBX,MAAO,EAAKA,UAjF9B,EAAKA,MAAQ,CACTX,MAAO,GACPO,YAAa,OAJF,E,iFAuEfE,KAAK+D,mB,GAxEMpC,IAAMC,WCoDVsC,E,2MAnDXhE,MAAQ,CACJiE,UAAW,I,EAKfC,WAAa,WACT,IAAIV,EAAgBC,KAAKC,UAAU,EAAK1D,MAAMiE,WAC9CN,aAAaC,QAAQ,WAAaJ,I,EAEtCW,WAAa,WACV,IAAIC,EAAc,GACbZ,EAAgBG,aAAaG,QAAQ,YACrCN,IACAY,EAAcX,KAAKM,MAAMP,IAE7B,EAAK3C,SAAS,CACVoD,UAAU,GAAD,mBAAM,EAAKjE,MAAMiE,WAAjB,YAAgCG,O,EAGjDC,YAAc,SAAC9E,GACX,IAMI6E,EAAc,CACd7E,MAAOA,EACPD,GAPA,EAAKU,MAAMiE,UAAUf,OAAS,EACrB,EAAKlD,MAAMiE,UAAU,EAAKjE,MAAMiE,UAAUf,OAAS,GAAG5D,GAAK,EAE3D,GAMb,EAAKuB,SAAS,CACVoD,UAAU,GAAD,mBAAK,EAAKjE,MAAMiE,WAAhB,CAA2BG,KACtC,EAAKF,a,mFA7BPpE,KAAKqE,e,+BAiCL,OACI,oCACI,kBAAC,EAAD,CAAgBzB,QAAS5C,KAAKuE,cAC9B,yBAAKnD,UAAU,OACVpB,KAAKE,MAAMiE,UAAUf,OAAO,GAAKpD,KAAKE,MAAMiE,UAAUjD,KAAI,SAAAsD,GACvD,OAAO,kBAAC,EAAD,CAAMrD,IAAKqD,EAAGhF,GAAIA,GAAIgF,EAAGhF,GAAIC,MAAO+E,EAAG/E,iB,GA3CpDkC,IAAMC,WCCxB6C,IAAS5B,OAAO,kBAAC,EAAD,CAAK1D,MAAOA,IAAWuF,SAASC,eAAe,SV4HzD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8faf0fe9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. Todo is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","let store = {\r\n    _state: {\r\n        TodoList: {\r\n            TodoListTasks: {\r\n                tasks: [\r\n                    {id: 1, title: \"CSS\", isDone: false, priority: 'low'},\r\n                    {id: 2, title: \"JS\", isDone: false, priority: 'height'},\r\n                    {id: 3, title: \"ReactJS\", isDone: true, priority: 'low'},\r\n                    {id: 4, title: \"JS\", isDone: false, priority: 'low'},\r\n                ]\r\n            },\r\n            TodoListFooter: {\r\n                filter: {\r\n                    filterValue: 'All'\r\n                }\r\n            }\r\n\r\n        }\r\n    },\r\n    getState() {\r\n        return this._state\r\n    }\r\n}\r\nexport default store","import React from 'react'\r\n\r\nclass TodoListTask extends React.Component {\r\n    state = {\r\n        editMode: false\r\n    }\r\n    callChangeIsDone = (el) => {\r\n        this.props.changeIsDone(el.id, el.isDone)\r\n    };\r\n    callChangeIsTitle = (e, el) => {\r\n        let body = e.target.value;\r\n        this.props.changeIsTitle(el.id, body);\r\n    };\r\n    activatedEditMode =(id)=>{\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n    deActivatedEditMode =(id)=>{\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.props.state.map(el => {\r\n                    return (\r\n                        <div key={el.id} className={el.isDone?\"todoList-task done\": \"todoList-task\"}>\r\n                            <input type=\"checkbox\" onChange={this.callChangeIsDone.bind(this, el)}\r\n                                   defaultChecked={el.isDone}/>\r\n                            <span>{`${el.id}-`}</span>\r\n                            {this.state.editMode?\r\n                                <input type=\"text\"\r\n                                       onBlur={this.deActivatedEditMode}\r\n                                       onChange={(e)=>this.callChangeIsTitle(e , el)}\r\n                                       value={el.title}/>:\r\n                                <span onClick={this.activatedEditMode.bind(this)}>{`${el.title}`}</span>\r\n                            }\r\n                            <small> , priority: {el.priority}</small>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default TodoListTask","import React from 'react'\r\nimport TodoListTask from \"./TodoListTask/TodoListTask\";\r\n\r\nconst TodoListHeader = (props) => {\r\n    return (\r\n        <div className=\"todoList-tasks\">\r\n            <TodoListTask changeIsTitle ={props.changeIsTitle}\r\n                          changeIsDone={props.changeIsDone}\r\n                          state={props.state}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoListHeader","import React from 'react'\r\nimport './TodoListFooter.sass'\r\n\r\nclass TodoListHeader extends React.Component {\r\n    state = {\r\n        isHidden: false\r\n    }\r\n    handleShow = () => {\r\n        this.setState({\r\n            isHidden: false\r\n        })\r\n    }\r\n    handleHidden = () => {\r\n        this.setState({\r\n            isHidden: true\r\n        })\r\n    }\r\n    render(){\r\n        let classForAll = this.props.filterValue === \"All\" ? \"filterActive\" : \"\";\r\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filterActive\" : \"\";\r\n        let classForActive = this.props.filterValue === \"Active\" ? \"filterActive\" : \"\";\r\n        return (\r\n            <div className=\"todoListFooter\">\r\n                {!this.state.isHidden &&\r\n                <React.Fragment>\r\n                    <button onClick={()=> this.props.changeFilterValue('All')}className={classForAll}>All</button>\r\n                    <button onClick={()=> this.props.changeFilterValue('Completed')}className={classForCompleted}>Completed</button>\r\n                    <button onClick={()=> this.props.changeFilterValue('Active')}className={classForActive}>Active</button>\r\n                </React.Fragment>\r\n                }\r\n                <br/>\r\n                {this.state.isHidden?\r\n                    <button onClick={this.handleShow}>Show</button>:\r\n                    <button onClick={this.handleHidden}>Hidden</button>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default TodoListHeader","import React from 'react'\r\n\r\nconst TodoListTitle = (props) => {\r\n    return (\r\n        <div className=\"todoList-header\">\r\n            <h3 className=\"todoList-header__title\">{props.title}</h3>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default TodoListTitle","import React from 'react'\r\n\r\nclass AddNewItemForm extends React.Component {\r\n    state = {\r\n        error: false,\r\n        title: ''\r\n    };\r\n    inputText = (e) => {\r\n        let text = e.target.value;\r\n        this.setState({\r\n            error: false,\r\n            title: text\r\n        })\r\n    };\r\n    callAddItem = () => {\r\n        let newTitle = this.state.title;\r\n        this.setState({title: ''});\r\n\r\n        if (!this.state.title) {\r\n            this.setState({\r\n                error: true,\r\n                title: newTitle\r\n            })\r\n\r\n        } else {\r\n            this.setState({\r\n                error: false\r\n            })\r\n        }\r\n        this.props.addItem(newTitle)\r\n\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <div className=\"todoList-newItemForm\">\r\n                <input type=\"text\" className={this.state.error ? 'error' : ''} value={this.state.title}\r\n                       onChange={this.inputText.bind(this)}\r\n                       placeholder=\"New task name\"/>\r\n                <button onClick={this.callAddItem.bind(this)}>Add</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddNewItemForm","import React from 'react'\r\nimport TodoListTasks from \"./TodoListTasks/TodoListTasks\";\r\nimport TodoListFooter from \"./TodoListFooter/TodoListFooter\";\r\nimport TodoListTitle from \"./TodoListHeader/TodoListTitle\";\r\nimport AddNewItemForm from \"./TodoListHeader/AddNewItemForm\";\r\n\r\nclass TodoList extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"todoList\">\r\n                <div className=\"todoList-header\">\r\n                    <TodoListTitle title = {this.props.title} />\r\n                    <AddNewItemForm   value={this.props.state.value}\r\n                                      taskText={this.props.taskText}\r\n                                      addItem = {this.props.addTask}\r\n                    />\r\n                </div>\r\n\r\n                <TodoListTasks changeIsDone={this.props.changeIsDone}\r\n                               changeIsTitle ={this.props.changeIsTitle}\r\n                               state={this.props.state.tasks.filter(t => {\r\n                    switch (this.props.state.filterValue) {\r\n                        case \"All\":\r\n                            return true;\r\n                        case \"Completed\":\r\n                            return t.isDone;\r\n                        case \"Active\":\r\n                            return !t.isDone;\r\n                        default:\r\n                            return true;\r\n\r\n                    }\r\n                })}\r\n                />\r\n                <TodoListFooter changeFilterValue={this.props.changeFilterValue}\r\n                                filterValue={this.props.state.filterValue}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default TodoList","import React from 'react';\r\nimport '../App.css';\r\nimport TodoList from \"./TodoList\";\r\n\r\nclass Todo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tasks: [],\r\n            filterValue: 'All'\r\n        }\r\n    }\r\n\r\n    addTask = (text) => {\r\n        let lastId;\r\n        if (this.state.tasks.length > 0)\r\n            lastId = this.state.tasks[this.state.tasks.length - 1].id + 1;\r\n        else\r\n            lastId = 0;\r\n        let obj = {\r\n            id: lastId,\r\n            title: text,\r\n            isDone: false,\r\n            priority: 'low'\r\n        };\r\n        if (text) {\r\n           this.setState({\r\n                tasks: [...this.state.tasks, obj],\r\n            }, this.saveState)\r\n        }\r\n\r\n    };\r\n\r\n    changeFilterValue = (filterText) => {\r\n        this.setState({\r\n            filterValue: filterText\r\n        })\r\n    };\r\n    changeIsTask = (taskId, obj) => {\r\n        let newTasks = this.state.tasks.map(t => {\r\n            if (t.id === taskId) {\r\n                return {...t, ...obj}\r\n            } else {\r\n                return t\r\n            }\r\n        });\r\n        this.setState({\r\n            tasks: newTasks\r\n        }, this.saveState)\r\n    };\r\n    changeIsDone = (taskId, isDone) => {\r\n        this.changeIsTask(taskId, {isDone: !isDone})\r\n    };\r\n    changeIsTitle = (taskId, title) => {\r\n        this.changeIsTask(taskId, {title})\r\n    };\r\n\r\n    saveState = () => {\r\n        let stateAsString = JSON.stringify(this.state);\r\n        localStorage.setItem(\"data\" + this.props.id, stateAsString);\r\n    };\r\n    restoreState = () => {\r\n        let state = {\r\n            tasks: [],\r\n            value: '',\r\n            filterValue: 'All'\r\n        };\r\n        let stateAsString = localStorage.getItem(\"data\" + this.props.id);\r\n        if (stateAsString) {\r\n            state = JSON.parse(stateAsString);\r\n        }\r\n        this.setState(state);\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.restoreState()\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div className=\"WrapTodo\">\r\n                <TodoList taskText={this.taskText}\r\n                          title = {this.props.title}\r\n                          addTask={this.addTask}\r\n                          changeFilterValue={this.changeFilterValue}\r\n                          changeIsDone={this.changeIsDone}\r\n                          changeIsTitle={this.changeIsTitle}\r\n                          state={this.state}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Todo;\r\n\r\n","import React from 'react'\r\nimport Todo from \"./Todo/Todo\";\r\nimport AddNewItemForm from \"./Todo/TodoListHeader/AddNewItemForm\";\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        todoLists: []\r\n    }\r\n    componentDidMount(){\r\n        this.getStorage()\r\n    }\r\n    setStorage = () =>{\r\n        let stateAsString = JSON.stringify(this.state.todoLists);\r\n        localStorage.setItem(\"todoList\" , stateAsString);\r\n    }\r\n    getStorage = () => {\r\n       let newTodoList = [];\r\n        let stateAsString = localStorage.getItem(\"todoList\") ;\r\n        if (stateAsString) {\r\n            newTodoList = JSON.parse(stateAsString);\r\n        }\r\n        this.setState({\r\n            todoLists: [...this.state.todoLists , ...newTodoList]});\r\n    }\r\n\r\n    addTodoList = (title) => {\r\n        let lastId = null;\r\n        if (this.state.todoLists.length > 0) {\r\n            lastId = this.state.todoLists[this.state.todoLists.length - 1].id + 1\r\n        } else {\r\n            lastId = 0\r\n        }\r\n        let newTodoList = {\r\n            title: title,\r\n            id: lastId\r\n        }\r\n        this.setState({\r\n            todoLists:[...this.state.todoLists, newTodoList]\r\n        },this.setStorage)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <AddNewItemForm addItem={this.addTodoList}/>\r\n                <div className=\"App\">\r\n                    {this.state.todoLists.length>0 && this.state.todoLists.map(tl => {\r\n                        return <Todo key={tl.id} id={tl.id} title={tl.title}/>\r\n                    })}\r\n\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './redux/store'\r\nimport App from \"./App\";\r\nReactDOM.render(<App store={store} />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}